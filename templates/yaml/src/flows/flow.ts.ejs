import {
  flow,
<%_ if (includes.branch) { _%>
  BinaryOperator,
  BooleanOperator,
  UnaryOperator,
<%_ } _%>
} from "@prismatic-io/spectral";
<%_ if (includes.branch) { _%>
import {
  evaluate,
} from "@prismatic-io/spectral/dist/conditionalLogic";
<%_ } _%>

export const <%= key %> = flow({
  name: "<%- flow.name -%>",
  stableKey: "<%= flow.stableKey %>",
  description: "<%= flow.description %>",
  isSynchronous: <%= flow.isSynchronous %>,
  endpointSecurityType: "<%= flow.endpointSecurityType %>",
  <%_ if (trigger.schedule) { _%>
  schedule: {
    <%_ if (trigger.schedule.type === "configVar") { _%>
    configVar: "<%- trigger.schedule.value -%>",
    <%_ } else { _%>
    value: "<%- trigger.schedule.value -%>",
      <%_ if (trigger.schedule.meta && trigger.schedule.meta.timeZone) { _%>
    timezone: "<%- trigger.schedule.meta.timeZone -%>",
      <%_ } _%>
    <%_ } _%>
  },
  <%_ } else { _%>
  onTrigger: {
    component: "<%= utils.camelCase(trigger.action.component.key) %>",
    key: "<%= trigger.action.key %>",
    values: {
      <%- trigger.formattedInputs %>
    },
  },
  <%_ } _%>
  onExecution: async (context, params) => {
    const { configVars } = context;

    <%_ steps.forEach((step) => { _%>
      <%_ if (step.loopString) { _%>
    <%- step.loopString %>
      <%_ } else if (step.branchString) { _%>
    <%- step.branchString %>
      <%_ } else { _%>
    const <%= utils.camelCase(step.name) %>: any = await context.components.<%= utils.camelCase(step.action.component.key) %>.<%= step.action.key %>({
      <%- step.formattedInputs %>
    });

      <%_ } _%>
    <%_ }) _%>

    return {
      data: <%= result ?? null %>,
    };
  },
});

export default <%= key %>;
