import {
  configPage,
  configVar,
  connectionConfigVar,
  dataSourceConfigVar,
} from "@prismatic-io/spectral";

export const configPages = {
  <%_ pages.forEach((page) => { _%>
  "<%= page.name %>": configPage({
    tagline: "<%= page.tagline %>",
    elements: {
      <%_ page.configVars.forEach((configVar) => { _%>
        <%_ if (configVar.dataType === "connection") { _%>
      "<%= configVar.name %>": connectionConfigVar({
        stableKey: "<%= configVar.key %>",
        dataType: "<%= configVar.dataType %>",
        connection: {
          component: "<%= utils.camelCase(configVar.connection.component.key) %>",
          key: "<%= configVar.connection.key %>",
          values: {
          <%_ configVar.inputs.forEach((input) => { _%>
            "<%= input.name %>": {
              <%_ if (input.type === "configVar") { _%>
              configVar: "<%= input.value %>",
              <%_ } else { _%>
              value: <%- utils.wrapValue(input.value, true) -%>,
              <%_ } _%>
              <%_ if (typeof input.meta.permissionAndVisibilityType) { _%>
              permissionAndVisibilityType: "<%= input.meta.permissionAndVisibilityType %>",
              <%_ } _%>
              <%_ if (input.meta.writeOnly) { _%>
              writeOnly: <%= input.meta.writeOnly %>,
              <%_ } _%>
              <%_ if (typeof input.meta.visibleToOrgDeployer === "boolean") { _%>
              visibleToOrgDeployer: <%= input.meta.visibleToOrgDeployer %>,
              <%_ } _%>
            },
          <%_ }) _%>
          },
        },
      }),
        <%_ } else if (configVar.dataSource) { _%>
      "<%= configVar.name %>": dataSourceConfigVar({
        stableKey: "<%= configVar.key %>",
        dataType: "<%= configVar.dataType %>",
        dataSource: {
          component: "<%= utils.camelCase(configVar.dataSource.component.key) %>",
          key: "<%= configVar.dataSource.key %>",
          values: {
          <%_ configVar.inputs.forEach((input) => { _%>
            "<%= input.name %>": {
              <%_ if (input.type === "configVar") { _%>
              configVar: "<%= input.value %>",
              <%_ } else { _%>
              value: <%- utils.wrapValue(input.value, true) -%>,
              <%_ } _%>
              <%_ if (typeof input.meta.permissionAndVisibilityType) { _%>
              permissionAndVisibilityType: "<%= input.meta.permissionAndVisibilityType %>",
              <%_ } _%>
              <%_ if (input.meta.writeOnly) { _%>
              writeOnly: <%= input.meta.writeOnly %>,
              <%_ } _%>
              <%_ if (typeof input.meta.visibleToOrgDeployer === "boolean") { _%>
              visibleToOrgDeployer: <%= input.meta.visibleToOrgDeployer %>,
              <%_ } _%>
            },
          <%_ }) _%>
          },
        },
      }),
        <%_ } else { _%>
      "<%= configVar.name %>": configVar({
        stableKey: "<%= configVar.key %>",
        dataType: "<%= configVar.dataType %>",
        description: "<%= configVar.description %>",
        <%_ if (configVar.meta.permissionAndVisibilityType) { _%>
        permissionAndVisibilityType: "<%= configVar.meta.permissionAndVisibilityType %>",
        <%_ } _%>
        <%_ if (typeof configVar.meta.visibleToOrgDeployer === "boolean") { _%>
        visibleToOrgDeployer: <%= configVar.meta.visibleToOrgDeployer %>,
        <%_ } _%>
        <%_ if (configVar.collectionType) { _%>
        collectionType: "<%= configVar.collectionType %>",
        defaultValue: <%- configVar.defaultValue %>,
        <%_ } else { _%>
        defaultValue: <%- utils.wrapValue(configVar.defaultValue) -%>,
        <%_ } _%>
      }),
        <%_ } _%>
      <%_ }) _%>
    },
  }),
  <%_ }) _%>
};
