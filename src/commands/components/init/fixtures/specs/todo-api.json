{
  "openapi": "3.1.1",
  "info": {
    "title": "Todo API",
    "version": "1.0.0",
    "description": "A simple Todo API for testing component generation",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/v1",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "todos",
      "description": "Todo operations"
    },
    {
      "name": "users",
      "description": "User management"
    }
  ],
  "paths": {
    "/todos": {
      "get": {
        "tags": ["todos"],
        "summary": "List all todos",
        "description": "Returns a list of all todos with optional filtering",
        "operationId": "listTodos",
        "parameters": [
          {
            "name": "completed",
            "in": "query",
            "description": "Filter by completion status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Todo"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": ["todos"],
        "summary": "Create a new todo",
        "description": "Creates a new todo item",
        "operationId": "createTodo",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Todo created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/todos/{todoId}": {
      "get": {
        "tags": ["todos"],
        "summary": "Get a specific todo",
        "description": "Returns a single todo by ID",
        "operationId": "getTodo",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodoId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": ["todos"],
        "summary": "Update a todo",
        "description": "Updates an existing todo",
        "operationId": "updateTodo",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodoId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": ["todos"],
        "summary": "Delete a todo",
        "description": "Deletes a todo by ID",
        "operationId": "deleteTodo",
        "parameters": [
          {
            "$ref": "#/components/parameters/TodoId"
          }
        ],
        "responses": {
          "204": {
            "description": "Todo deleted successfully"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["users"],
        "summary": "Get current user",
        "description": "Returns information about the authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Todo": {
        "type": "object",
        "required": ["id", "title", "completed", "createdAt"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the todo",
            "examples": ["123e4567-e89b-12d3-a456-426614174000"]
          },
          "title": {
            "type": "string",
            "description": "The todo title",
            "minLength": 1,
            "maxLength": 200,
            "examples": ["Buy groceries"]
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description",
            "maxLength": 1000,
            "examples": ["Milk, eggs, bread, and coffee"]
          },
          "completed": {
            "type": "boolean",
            "description": "Whether the todo is completed",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the todo was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the todo was last updated"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional tags for categorization",
            "examples": [["shopping", "urgent"]]
          }
        }
      },
      "TodoInput": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "The todo title",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "description": "Optional detailed description",
            "maxLength": 1000
          },
          "completed": {
            "type": "boolean",
            "description": "Whether the todo is completed",
            "default": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional tags for categorization"
          }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "email", "name"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "description": "User's full name"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user account was created"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          }
        }
      }
    },
    "parameters": {
      "TodoId": {
        "name": "todoId",
        "in": "path",
        "description": "Todo ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "BAD_REQUEST",
              "message": "Invalid request parameters"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "UNAUTHORIZED",
              "message": "Authentication required"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "NOT_FOUND",
              "message": "Resource not found"
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": "INTERNAL_ERROR",
              "message": "An unexpected error occurred"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication"
      }
    }
  }
}