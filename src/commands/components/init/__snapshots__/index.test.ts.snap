// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`component generation tests wsdl NumberConversion.wsdl generation should match actions.ts snapshot: numberconversion-actions.ts 1`] = `
"import { action } from "@prismatic-io/spectral";
import * as path from "path";
import { createClientAsync } from "../numberconversion/index";
import { dNum, options, ubiNum } from "./inputs";
export const numberToDollarsAsync = action({
  display: {
    label: "Number To Dollars Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { dNum, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "numberConversion.wsdl"),
      headers,
    );
    const [result] = await client.NumberToDollarsAsync({ dNum }, { options });
    return { data: result };
  },
  inputs: {
    dNum,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const numberToWordsAsync = action({
  display: {
    label: "Number To Words Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { ubiNum, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "numberConversion.wsdl"),
      headers,
    );
    const [result] = await client.NumberToWordsAsync({ ubiNum }, { options });
    return { data: result };
  },
  inputs: {
    ubiNum,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});

export default {
  numberToDollarsAsync,
  numberToWordsAsync,
};
"
`;

exports[`component generation tests wsdl NumberConversion.wsdl generation should match triggers.ts snapshot: numberconversion-triggers.ts 1`] = `
"import { trigger } from "@prismatic-io/spectral";

export const myTrigger = trigger({
  display: {
    label: "My Trigger",
    description: "This is my trigger",
  },
  perform: async (context, payload, params) => {
    console.log("My Trigger params", params);
    return Promise.resolve({
      payload,
    });
  },
  inputs: {},
  synchronousResponseSupport: "valid",
  scheduleSupport: "valid",
});

export default { myTrigger };
"
`;

exports[`component generation tests wsdl NumberConversion.wsdl generation should match index.ts snapshot: numberconversion-index.ts 1`] = `
"import { component } from "@prismatic-io/spectral";
import actions from "./actions";
import triggers from "./triggers";
import dataSources from "./dataSources";
import connections from "./connections";

export default component({
  key: "numberconversion",
  public: false,
  display: {
    label: "numberconversion",
    description: "Prism-generated Component",
    iconPath: "icon.png",
  },
  actions,
  triggers,
  dataSources,
  connections,
});
"
`;

exports[`component generation tests wsdl NumberConversion.wsdl generation should match inputs.ts snapshot: numberconversion-inputs.ts 1`] = `
"import { input } from "@prismatic-io/spectral";
export const dNum = input({
  label: "DNum",
  type: "data",
  required: true,
});
export const options = input({
  label: "Options",
  type: "data",
  required: true,
});
export const ubiNum = input({
  label: "UbiNum",
  type: "data",
  required: true,
});
"
`;

exports[`component generation tests wsdl CountryInfoService.wsdl generation should match actions.ts snapshot: countryinfoservice-actions.ts 1`] = `
"import { action } from "@prismatic-io/spectral";
import * as path from "path";
import { createClientAsync } from "../countryinfoservice/index";
import {
  options,
  sCountryISOCode,
  sCountryName,
  sCurrencyISOCode,
  sISOCode,
  sISOCurrencyCode,
  sLanguageName,
} from "./inputs";
export const capitalCityAsync = action({
  display: {
    label: "Capital City Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CapitalCityAsync(
      { sCountryISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const countriesUsingCurrencyAsync = action({
  display: {
    label: "Countries Using Currency Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sISOCurrencyCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CountriesUsingCurrencyAsync(
      { sISOCurrencyCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sISOCurrencyCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const countryCurrencyAsync = action({
  display: {
    label: "Country Currency Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CountryCurrencyAsync(
      { sCountryISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const countryFlagAsync = action({
  display: {
    label: "Country Flag Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CountryFlagAsync(
      { sCountryISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const countryIntPhoneCodeAsync = action({
  display: {
    label: "Country Int Phone Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CountryIntPhoneCodeAsync(
      { sCountryISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const countryIsoCodeAsync = action({
  display: {
    label: "Country Iso Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryName, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CountryISOCodeAsync(
      { sCountryName },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryName,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const countryNameAsync = action({
  display: {
    label: "Country Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CountryNameAsync(
      { sCountryISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const currencyNameAsync = action({
  display: {
    label: "Currency Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCurrencyISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.CurrencyNameAsync(
      { sCurrencyISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCurrencyISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const fullCountryInfoAllCountriesAsync = action({
  display: {
    label: "Full Country Info All Countries Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.FullCountryInfoAllCountriesAsync(
      {},
      { options },
    );
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const fullCountryInfoAsync = action({
  display: {
    label: "Full Country Info Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sCountryISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.FullCountryInfoAsync(
      { sCountryISOCode },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sCountryISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const languageIsoCodeAsync = action({
  display: {
    label: "Language Iso Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sLanguageName, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.LanguageISOCodeAsync(
      { sLanguageName },
      { options },
    );
    return { data: result };
  },
  inputs: {
    sLanguageName,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const languageNameAsync = action({
  display: {
    label: "Language Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async (
    { logger },
    { sISOCode, options, headers }: Record<string, any>,
  ) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.LanguageNameAsync({ sISOCode }, { options });
    return { data: result };
  },
  inputs: {
    sISOCode,
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfContinentsByCodeAsync = action({
  display: {
    label: "List Of Continents By Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfContinentsByCodeAsync({}, { options });
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfContinentsByNameAsync = action({
  display: {
    label: "List Of Continents By Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfContinentsByNameAsync({}, { options });
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfCountryNamesByCodeAsync = action({
  display: {
    label: "List Of Country Names By Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfCountryNamesByCodeAsync(
      {},
      { options },
    );
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfCountryNamesByNameAsync = action({
  display: {
    label: "List Of Country Names By Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfCountryNamesByNameAsync(
      {},
      { options },
    );
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfCountryNamesGroupedByContinentAsync = action({
  display: {
    label: "List Of Country Names Grouped By Continent Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfCountryNamesGroupedByContinentAsync(
      {},
      { options },
    );
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfCurrenciesByCodeAsync = action({
  display: {
    label: "List Of Currencies By Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfCurrenciesByCodeAsync({}, { options });
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfCurrenciesByNameAsync = action({
  display: {
    label: "List Of Currencies By Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfCurrenciesByNameAsync({}, { options });
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfLanguagesByCodeAsync = action({
  display: {
    label: "List Of Languages By Code Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfLanguagesByCodeAsync({}, { options });
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});
export const listOfLanguagesByNameAsync = action({
  display: {
    label: "List Of Languages By Name Async",
    description: \`Generated by Prismatic\`,
  },
  perform: async ({ logger }, { options, headers }: Record<string, any>) => {
    const client = await createClientAsync(
      path.join(__dirname, "countryInfoService.wsdl"),
      headers,
    );
    const [result] = await client.ListOfLanguagesByNameAsync({}, { options });
    return { data: result };
  },
  inputs: {
    options,
    headers: {
      label: "Headers",
      type: "code",
      comments: "Provide headers to the SOAP client",
      default: "{}",
    },
  },
});

export default {
  capitalCityAsync,
  countriesUsingCurrencyAsync,
  countryCurrencyAsync,
  countryFlagAsync,
  countryIntPhoneCodeAsync,
  countryIsoCodeAsync,
  countryNameAsync,
  currencyNameAsync,
  fullCountryInfoAllCountriesAsync,
  fullCountryInfoAsync,
  languageIsoCodeAsync,
  languageNameAsync,
  listOfContinentsByCodeAsync,
  listOfContinentsByNameAsync,
  listOfCountryNamesByCodeAsync,
  listOfCountryNamesByNameAsync,
  listOfCountryNamesGroupedByContinentAsync,
  listOfCurrenciesByCodeAsync,
  listOfCurrenciesByNameAsync,
  listOfLanguagesByCodeAsync,
  listOfLanguagesByNameAsync,
};
"
`;

exports[`component generation tests wsdl CountryInfoService.wsdl generation should match triggers.ts snapshot: countryinfoservice-triggers.ts 1`] = `
"import { trigger } from "@prismatic-io/spectral";

export const myTrigger = trigger({
  display: {
    label: "My Trigger",
    description: "This is my trigger",
  },
  perform: async (context, payload, params) => {
    console.log("My Trigger params", params);
    return Promise.resolve({
      payload,
    });
  },
  inputs: {},
  synchronousResponseSupport: "valid",
  scheduleSupport: "valid",
});

export default { myTrigger };
"
`;

exports[`component generation tests wsdl CountryInfoService.wsdl generation should match index.ts snapshot: countryinfoservice-index.ts 1`] = `
"import { component } from "@prismatic-io/spectral";
import actions from "./actions";
import triggers from "./triggers";
import dataSources from "./dataSources";
import connections from "./connections";

export default component({
  key: "countryinfoservice",
  public: false,
  display: {
    label: "countryinfoservice",
    description: "Prism-generated Component",
    iconPath: "icon.png",
  },
  actions,
  triggers,
  dataSources,
  connections,
});
"
`;

exports[`component generation tests wsdl CountryInfoService.wsdl generation should match inputs.ts snapshot: countryinfoservice-inputs.ts 1`] = `
"import { input } from "@prismatic-io/spectral";
export const options = input({
  label: "Options",
  type: "data",
  required: true,
});
export const sCountryISOCode = input({
  label: "SCountryIsoCode",
  type: "data",
  required: true,
});
export const sCountryName = input({
  label: "SCountryName",
  type: "data",
  required: true,
});
export const sCurrencyISOCode = input({
  label: "SCurrencyIsoCode",
  type: "data",
  required: true,
});
export const sISOCode = input({
  label: "SIsoCode",
  type: "data",
  required: true,
});
export const sISOCurrencyCode = input({
  label: "SIsoCurrencyCode",
  type: "data",
  required: true,
});
export const sLanguageName = input({
  label: "SLanguageName",
  type: "data",
  required: true,
});
"
`;
