// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/jest.config.js 1`] = `
"module.exports = {
  preset: "ts-jest",
  testEnvironment: "node",
};
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/.npmrc 1`] = `
"@component-manifests:registry=https://app.dev.prismatic-dev.io/packages/npm
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/.prettierignore 1`] = `
"# Ignore artifacts:
.spectral
build
coverage
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/.prettierrc 1`] = `
"{}
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/tsconfig.json 1`] = `
"{
  "compilerOptions": {
    "target": "es6",
    "lib": ["esnext"],
    "strict": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node"
  },
  "include": ["src", ".spectral/*"]
}
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/.spectral/index.ts 1`] = `
"import type { ComponentManifest, ConfigPage, ScopedConfigVar } from "@prismatic-io/spectral";

// @ts-ignore
import type { configPages, componentRegistry, userLevelConfigPages, scopedConfigVars } from "../src";

type IsAny<T> = 0 extends 1 & T ? true : false;

type TConfigPages =
  IsAny<typeof configPages> extends true
    ? { [key: string]: ConfigPage }
    : typeof configPages;

type TUserLevelConfigPages =
  IsAny<typeof userLevelConfigPages> extends true
    ? { [key: string]: ConfigPage }
    : typeof userLevelConfigPages;

type TComponentRegistry =
  IsAny<typeof componentRegistry> extends true
    ? { [key: string]: ComponentManifest }
    : typeof componentRegistry;

type TScopedConfigVarMap =
  IsAny<typeof scopedConfigVars> extends true
    ? { [key: string]: ScopedConfigVar }
    : typeof scopedConfigVars;

declare module "@prismatic-io/spectral" {
  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  interface IntegrationDefinitionConfigPages extends TConfigPages {}

  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  interface IntegrationDefinitionUserLevelConfigPages
    extends TUserLevelConfigPages {}

  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  interface IntegrationDefinitionComponentRegistry extends TComponentRegistry {}

  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  interface IntegrationDefinitionScopedConfigVars extends TScopedConfigVarMap {}
}

"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/configPages.ts 1`] = `
"import { configPage, configVar, connectionConfigVar, dataSourceConfigVar } from "@prismatic-io/spectral";

export const configPages = {
  "Connections Page": configPage({
    tagline: "",
    elements: {
      "Slack Connection": connectionConfigVar({
        stableKey: "Slack Connection",
        dataType: "connection",
        connection: {
          component: "slack",
          key: "oauth2",
          values: {
            "authorizeUrl": {
              value: "https://slack.com/oauth/v2/authorize",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "clientId": {
              value: "7610303900993.7610321662833",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "clientSecret": {
              value: "b6acb317302a8ce8a01fbf24ab371338",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "isUser": {
              value: false,
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "revokeUrl": {
              value: "https://slack.com/api/auth.revoke",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "scopes": {
              value: "chat:write chat:write.public chat:write.customize channels:read groups:read im:read mpim:read users:read",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "signingSecret": {
              value: "32cf662b1f05eb9a4472ef6900f0bb53",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "tokenUrl": {
              value: "https://slack.com/api/oauth.v2.access",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
          },
        },
      }),
    },
  }),
  "Config Vars Page": configPage({
    tagline: "",
    elements: {
      "Simple string": configVar({
        stableKey: "Simple string",
        dataType: "string",
        description: "undefined",
        permissionAndVisibilityType: "organization",
        visibleToOrgDeployer: true,
        defaultValue: "The quick brown fox jumps over the lazy dog.",
      }),
      "Simple number": configVar({
        stableKey: "Simple number",
        dataType: "number",
        description: "undefined",
        permissionAndVisibilityType: "embedded",
        defaultValue: 1,
      }),
      "Simple list": configVar({
        stableKey: "Simple list",
        dataType: "string",
        description: "undefined",
        permissionAndVisibilityType: "embedded",
        collectionType: "valuelist", defaultValue: ["abc", "def", "ghi"],
      }),
      "Simple key value list": configVar({
        stableKey: "Simple key value list",
        dataType: "string",
        description: "undefined",
        permissionAndVisibilityType: "embedded",
        collectionType: "keyvaluelist", defaultValue: [{ "key": "key1", "value": "myvalue" }, { "key": "key2", "value": "myothervalue" }, { "key": "key3", "value": "myotherothervalue" }],
      }),
    },
  }),
  "Data Sources Page": configPage({
    tagline: "",
    elements: {
      "Slack Channels Data Source": dataSourceConfigVar({
        stableKey: "Slack Channels Data Source",
        dataType: "picklist",
        dataSource: {
          component: "slack",
          key: "selectChannels",
          values: {
            "connection": {
              configVar: "Slack Connection",
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "includeImChannels": {
              value: false,
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "includeMultiPartyImchannels": {
              value: false,
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "includePrivateChannels": {
              value: false,
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "includePublicChannels": {
              value: true,
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
            "showIdInDropdown": {
              value: false,
              permissionAndVisibilityType: "embedded",
              visibleToOrgDeployer: false,
            },
          },
        },
      }),
    },
  }),
}
  ;
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/componentRegistry.ts 1`] = `
"import { componentManifests } from "@prismatic-io/spectral";
import branch from "@component-manifests/branch";
import code from "@component-manifests/code";
import log from "@component-manifests/log";
import loop from "@component-manifests/loop";
import scheduleTriggers from "@component-manifests/schedule-triggers";
import slack from "@component-manifests/slack";
import webhookTriggers from "@component-manifests/webhook-triggers";

export const componentRegistry = componentManifests({
  branch,
  code,
  log,
  loop,
  scheduleTriggers,
  slack,
  webhookTriggers,
})
  ;
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/index.ts 1`] = `
"import { integration } from "@prismatic-io/spectral";
import flows from "./flows";
import { configPages } from "./configPages";
import { componentRegistry } from "./componentRegistry";

export { configPages } from "./configPages";
export { componentRegistry } from "./componentRegistry";

export default integration({
  name: "Test Integration",
  description: "",
  iconPath: "icon.png",
  flows,
  configPages,
  componentRegistry,
});
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/flows/basic.ts 1`] = `
"import { flow } from "@prismatic-io/spectral";

export const basic = flow({
  name: "Basic",
  stableKey: "basic",
  description: "",
  isSynchronous: false,
  endpointSecurityType: "customer_optional",
  onTrigger: {
    component: "webhookTriggers",
    key: "webhook",
    values: {
      body: { value: "", },
      contentType: { value: "", },
      headers: { value: [], },
      statusCode: { value: "", },
    },
  },
  onExecution: async (context, params) => {
    const { configVars } = context;
    const postMessage = await context.components.slack.postMessage({
      channelName: "general",
      connection: configVars["Slack Connection"],
      debug: false,
      message: "Hello this is my Slack message",
      messageId: "",
      username: "myTestSlackBot",
    });
    const writeLogMessage = await context.components.log.writeLog({
      level: "info",
      message: "Here is a simple log message at the end of my flow",
    });
    return { data: writeLogMessage };
  },
})
  ;

export default basic;
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/flows/index.ts 1`] = `
"import { basic } from "./basic";
import { stepConfigVarReferences } from "./stepConfigVarReferences";
import { loopBranchTests } from "./loopBranchTests";

export default [basic, stepConfigVarReferences, loopBranchTests]
  ;
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/flows/stepConfigVarReferences.ts 1`] = `
"import { flow } from "@prismatic-io/spectral";

export const stepConfigVarReferences = flow({
  name: "Step & configVar references",
  stableKey: "step-config-var-references",
  description: "",
  isSynchronous: false,
  endpointSecurityType: "customer_optional",
  onTrigger: {
    component: "webhookTriggers",
    key: "webhook",
    values: {
      body: { value: "", },
      contentType: { value: "", },
      headers: { value: [], },
      statusCode: { value: "", },
    },
  },
  onExecution: async (context, params) => {
    const { configVars } = context;
    const codeBlock = await context.components.code.runCode({
      code: \`module.exports = async ({ logger, configVars }, stepResults) => {
  return { data: { testKey: "My return value" } };
};
\`,
    });
    const templateReferences = await context.components.log.writeLog({
      level: "info",
      message: \`The response of the code block action was: \${codeBlock.data.testKey}. This config var value is: \${configVars["Simple string"]}.\`,
    });
    const directConfigVarReference = await context.components.log.writeLog({
      level: "info",
      message: configVars["Simple string"],
    });
    const directStepReference = await context.components.log.writeLog({
      level: "info",
      message: codeBlock.data.testKey,
    });
    const dataSourceReference = await context.components.log.writeLog({
      level: "info",
      message: configVars["Slack Channels Data Source"],
    });
    return { data: dataSourceReference };
  },
})
  ;

export default stepConfigVarReferences;
"
`;

exports[`YAML CNI generation tests test-integration should match scaffolding snapshots: test-integration/src/flows/loopBranchTests.ts 1`] = `
"import { isEqual } from "@prismatic-io/spectral/dist/conditionalLogic";
import { flow } from "@prismatic-io/spectral";

export const loopBranchTests = flow({
  name: "Loop & branch tests",
  stableKey: "loop-branch-tests",
  description: "",
  isSynchronous: false,
  endpointSecurityType: "customer_optional",
  schedule: {
    value: "*/10 * * * *",
  },
  onExecution: async (context, params) => {
    const { configVars } = context;
    const listUsers = await context.components.slack.listUsers({
      connection: configVars["Slack Connection"],
      cursor: "",
      debug: false,
      limit: "",
      teamId: "",
    });
    const loopOverItems: { data: unknown[] } = { data: [] };
    for (const loopOverItemsItem of listUsers.data.members) {
      const writeLogMessage = await context.components.log.writeLog({
        level: "info",
        message: loopOverItemsItem.name,
      });

      /* This string is the name of the branch that this conditional block resolves to. */
      let branchOnExpression: string;
      if (isEqual(loopOverItemsItem.name, "slackbot")) {
        const codeBlock = await context.components.code.runCode({
          code: \`module.exports = async ({ logger, configVars }, stepResults) => {
  return { data: true };
};
\`,
        });
        branchOnExpression = "it is slackbot";
      } else {
        break;
      }
      loopOverItems.data.push(branchOnExpression);
    }

    const loopNTimes: { data: unknown[] } = { data: [] };
    for (let loopNTimesIdx = 0; loopNTimesIdx < 100; loopNTimesIdx++) {
      const writeLogMessage2 = await context.components.log.writeLog({
        level: "info",
        message: loopOverItems.data[0],
      });

      const codeBlock2 = await context.components.code.runCode({
        code: \`module.exports = async ({ logger, configVars }, stepResults) => {
  return { data: 100 };
};
\`,
      });

      loopNTimes.data.push(codeBlock2.data);
    }

    const writeLogMessage3 = await context.components.log.writeLog({
      level: "info",
      message: loopNTimes.data[5],
    });
    const selectExecutedStepResult = await context.components.branch.selectExecutedStepResult({ stepResults: ["aTestValue",], });
    return { data: selectExecutedStepResult };
  },
})
  ;

export default loopBranchTests;
"
`;
